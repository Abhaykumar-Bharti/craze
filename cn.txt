FULL DUPLEX
import socket
import threading


def handle_client(client_socket):
    """Function to handle incoming messages from the client."""
    while True:
        try:
            message = client_socket.recv(1024).decode()
            if not message:
                print("Client disconnected.")
                break
            print(f"Client: {message}")
        except Exception as e:
            print(f"Error: {e}")
            break
    client_socket.close()


def start_server():
    """Function to start the server."""
    server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    server_socket.bind(('localhost', 8080))
    server_socket.listen(5)
    print("Server is listening...")


    while True:
        client_socket, addr = server_socket.accept()
        print(f"Connected by {addr}")
        threading.Thread(target=handle_client, args=(client_socket,)).start()


def receive_messages(client_socket):
    """Function to receive messages from the server."""
    while True:
        try:
            message = client_socket.recv(1024).decode()
            if not message:
                print("Server disconnected.")
                break
            print(f"Server: {message}")
        except Exception as e:
            print(f"Error: {e}")
            break


def start_client():
    """Function to start the client."""
    client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    client_socket.connect(('localhost', 8080))


    threading.Thread(target=receive_messages, args=(client_socket,)).start()


    while True:
        message = input("Enter message to send to server (type 'exit' to quit): ")
        if message.lower() == 'exit':
            break
        client_socket.send(message.encode())


    client_socket.close()


if __name__ == "__main__":
    role = input("Choose your role (server/client): ").strip().lower()
    if role == "server":
        start_server()
    elif role == "client":
        start_client()
    else:
        print("Invalid role selected. Please choose 'server' or 'client'.")


HALF DUPLEX
import socket


def start_server():
    server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    server_socket.bind(('localhost', 8080))  # Bind to localhost and port 8080
    server_socket.listen(1)  # Listen for a single connection
    print("Server is listening...")

    conn, addr = server_socket.accept()  # Accept the connection
    print(f"Connected by {addr}")

    while True:
        data = conn.recv(1024).decode()  # Receive data from client
        if not data:
            print("Client disconnected.")
            break
        print(f"Client: {data}")
       
        message = input("Enter message to send to client: ")  # Take input to send to client
        conn.send(message.encode())  # Send the message to client

    conn.close()  # Close the connection
    server_socket.close()  # Close the server socket

def start_client():
    client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    client_socket.connect(('localhost', 8080))  # Connect to the server

    while True:
        message = input("Enter message to send to server: ")  # Take input to send to server
        client_socket.send(message.encode())  # Send the message to server
       
        data = client_socket.recv(1024).decode()  # Receive data from server
        if not data:
            print("Server disconnected.")
            break
        print(f"Server: {data}")

    client_socket.close()  # Close the client socket

if __name__ == "__main__":
    role = input("Choose your role (server/client): ").strip().lower()
    if role == "server":
        start_server()
    elif role == "client":
        start_client()
    else:
        print("Invalid role selected. Please choose 'server' or 'client'.")


tcp
# Create a simulator object
set ns [Simulator instance]

# Open the NAM trace file
set nf [open out.nam w]
$ns namtrace-all $nf

# Define a 'finish' procedure
proc finish {} {
        global ns nf
        $ns flush-trace
        # Close the NAM trace file
        close $nf
        # Execute NAM on the trace file
        exec nam out.nam &
        exit 0
}

# Create four nodes
set n0 [$ns node]
set n1 [$ns node]
set n2 [$ns node]
set n3 [$ns node]

# Create links between the nodes
$ns duplex-link $n0 $n2 2Mb 10ms DropTail
$ns duplex-link $n1 $n2 2Mb 10ms DropTail
$ns duplex-link $n2 $n3 1.7Mb 20ms DropTail

# Set Queue Size of link (n2-n3) to 10
$ns queue-limit $n2 $n3 10

# Give node position (for NAM)
$ns duplex-link-op $n0 $n2 orient right-down
$ns duplex-link-op $n1 $n2 orient right-up
$ns duplex-link-op $n2 $n3 orient right

# Monitor the queue for link (n2-n3). (for NAM)
$ns duplex-link-op $n2 $n3 queuePos 0.5

# Setup a TCP connection
set tcp [new Agent/TCP]
$tcp set class_ 2
$ns attach-agent $n0 $tcp
set sink [new Agent/TCPSink]
$ns attach-agent $n3 $sink
$ns connect $tcp $sink
$tcp set fid_ 1

# Setup a FTP over TCP connection
set ftp [new Application/FTP]
$ftp attach-agent $tcp
$ftp set type_ FTP

# Schedule events for the FTP agent
$ns at 1.0 "$ftp start"
$ns at 4.0 "$ftp stop"

# Detach tcp and sink agents (not really necessary)
$ns at 4.5 "$ns detach-agent $n0 $tcp ; $ns detach-agent $n3 $sink"

# Call the finish procedure after 5 seconds of simulation time
$ns at 5.0 "finish"

# Run the simulation
$ns run


udp
# Create a simulator object
set ns [Simulator instance]

# Open the NAM trace file
set nf [open out.nam w]
$ns namtrace-all $nf

# Define a 'finish' procedure
proc finish {} {
        global ns nf
        $ns flush-trace
        # Close the NAM trace file
        close $nf
        # Execute NAM on the trace file
        exec nam out.nam &
        exit 0
}

# Create four nodes
set n0 [$ns node]
set n1 [$ns node]
set n2 [$ns node]
set n3 [$ns node]

# Create links between the nodes
$ns duplex-link $n0 $n2 2Mb 10ms DropTail
$ns duplex-link $n1 $n2 2Mb 10ms DropTail
$ns duplex-link $n2 $n3 1.7Mb 20ms DropTail

# Set Queue Size of link (n2-n3) to 10
$ns queue-limit $n2 $n3 10

# Give node position (for NAM)
$ns duplex-link-op $n0 $n2 orient right-down
$ns duplex-link-op $n1 $n2 orient right-up
$ns duplex-link-op $n2 $n3 orient right

# Monitor the queue for link (n2-n3). (for NAM)
$ns duplex-link-op $n2 $n3 queuePos 0.5

# Setup a UDP connection
set udp [new Agent/UDP]
$ns attach-agent $n1 $udp
set null [new Agent/Null]
$ns attach-agent $n3 $null
$ns connect $udp $null
$udp set fid_ 2

# Setup a CBR over UDP connection
set cbr [new Application/Traffic/CBR]
$cbr attach-agent $udp
$cbr set type_ CBR
$cbr set packet_size_ 1000
$cbr set rate_ 1mb
$cbr set random_ false

# Schedule events for the CBR agent
$ns at 0.1 "$cbr start"
$ns at 4.5 "$cbr stop"

# Call the finish procedure after 5 seconds of simulation time
$ns at 5.0 "finish"

# Run the simulation
$ns run
